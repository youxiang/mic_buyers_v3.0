//
// DO NOT EDIT THIS FILE, IT HAS BEEN GENERATED USING AndroidAnnotations 3.0.1.
//


package com.micen.buyers.activity.searchresult;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.res.Resources;
import android.os.Bundle;
import android.view.KeyEvent;
import android.view.View;
import android.view.ViewGroup.LayoutParams;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import com.micen.buyers.activity.R.color;
import com.micen.buyers.activity.R.id;
import com.micen.buyers.module.search.SearchLocation;
import com.micen.buyers.module.sift.SearchProperty;
import com.micen.buyers.module.sift.SiftCategory;
import org.androidannotations.api.SdkVersionHelper;
import org.androidannotations.api.view.HasViews;
import org.androidannotations.api.view.OnViewChangedListener;
import org.androidannotations.api.view.OnViewChangedNotifier;

public final class RefineActivity_
    extends RefineActivity
    implements HasViews, OnViewChangedListener
{

    private final OnViewChangedNotifier onViewChangedNotifier_ = new OnViewChangedNotifier();
    public final static String IS_COMPANY_EXTRA = "iscompany";
    public final static String SIFT_CATOGORIES_LIST_EXTRA = "siftcategory";
    public final static String SIFT_MAP_EXTRA = "siftmap";
    public final static String SIFT_LOCATIONS_LIST_EXTRA = "siftlocations";
    public final static String SIFT_PROPERTIES_LIST_EXTRA = "siftproperty";
    public final static String IS_CATEGORY_EXTRA = "isCategory";

    @Override
    public void onCreate(Bundle savedInstanceState) {
        OnViewChangedNotifier previousNotifier = OnViewChangedNotifier.replaceNotifier(onViewChangedNotifier_);
        init_(savedInstanceState);
        super.onCreate(savedInstanceState);
        OnViewChangedNotifier.replaceNotifier(previousNotifier);
    }

    private void init_(Bundle savedInstanceState) {
        OnViewChangedNotifier.registerOnViewChangedListener(this);
        Resources resources_ = this.getResources();
        color_e62e2e = resources_.getColor(color.color_e62e2e);
        color_333333 = resources_.getColor(color.color_333333);
        injectExtras_();
    }

    @Override
    public void setContentView(int layoutResID) {
        super.setContentView(layoutResID);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    @Override
    public void setContentView(View view, LayoutParams params) {
        super.setContentView(view, params);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    @Override
    public void setContentView(View view) {
        super.setContentView(view);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    public static RefineActivity_.IntentBuilder_ intent(Context context) {
        return new RefineActivity_.IntentBuilder_(context);
    }

    public static RefineActivity_.IntentBuilder_ intent(android.app.Fragment fragment) {
        return new RefineActivity_.IntentBuilder_(fragment);
    }

    public static RefineActivity_.IntentBuilder_ intent(android.support.v4.app.Fragment supportFragment) {
        return new RefineActivity_.IntentBuilder_(supportFragment);
    }

    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (((SdkVersionHelper.getSdkInt()< 5)&&(keyCode == KeyEvent.KEYCODE_BACK))&&(event.getRepeatCount() == 0)) {
            onBackPressed();
        }
        return super.onKeyDown(keyCode, event);
    }

    @Override
    public void onViewChanged(HasViews hasViews) {
        titleLeftButton = ((ImageView) hasViews.findViewById(id.common_title_back_button));
        titleRightButton3 = ((ImageView) hasViews.findViewById(id.common_title_right_button3));
        titleRightButton2 = ((ImageView) hasViews.findViewById(id.common_title_right_button2));
        titleRightButton1 = ((ImageView) hasViews.findViewById(id.common_title_right_button1));
        titleText = ((TextView) hasViews.findViewById(id.common_title_name));
        resetBtn = ((Button) hasViews.findViewById(id.reset_btn));
        doneBtn = ((Button) hasViews.findViewById(id.done_btn));
        ll_attribute = ((LinearLayout) hasViews.findViewById(id.attribute_text));
        tv_location = ((TextView) hasViews.findViewById(id.tv_location));
        tv_attribute = ((TextView) hasViews.findViewById(id.tv_attribute));
        ll_category = ((LinearLayout) hasViews.findViewById(id.category_text));
        iv_category = ((ImageView) hasViews.findViewById(id.iv_category));
        iv_location = ((ImageView) hasViews.findViewById(id.iv_location));
        tv_category = ((TextView) hasViews.findViewById(id.tv_category));
        ll_supplier = ((LinearLayout) hasViews.findViewById(id.supplier_text));
        iv_supplier = ((ImageView) hasViews.findViewById(id.iv_supplier));
        tv_supplier = ((TextView) hasViews.findViewById(id.tv_supplier));
        iv_attribute = ((ImageView) hasViews.findViewById(id.iv_attribute));
        centerLayout = ((LinearLayout) hasViews.findViewById(id.center_layout));
        ll_location = ((LinearLayout) hasViews.findViewById(id.location_text));
        initData();
    }

    @SuppressWarnings("unchecked")
    private void injectExtras_() {
        Bundle extras_ = getIntent().getExtras();
        if (extras_!= null) {
            if (extras_.containsKey(IS_COMPANY_EXTRA)) {
                isCompany = extras_.getBoolean(IS_COMPANY_EXTRA);
            }
            if (extras_.containsKey(SIFT_CATOGORIES_LIST_EXTRA)) {
                siftCatogoriesList = ((ArrayList<SiftCategory> ) extras_.getSerializable(SIFT_CATOGORIES_LIST_EXTRA));
            }
            if (extras_.containsKey(SIFT_MAP_EXTRA)) {
                siftMap = ((HashMap<String, String> ) extras_.getSerializable(SIFT_MAP_EXTRA));
            }
            if (extras_.containsKey(SIFT_LOCATIONS_LIST_EXTRA)) {
                siftLocationsList = ((ArrayList<SearchLocation> ) extras_.getSerializable(SIFT_LOCATIONS_LIST_EXTRA));
            }
            if (extras_.containsKey(SIFT_PROPERTIES_LIST_EXTRA)) {
                siftPropertiesList = ((ArrayList<SearchProperty> ) extras_.getSerializable(SIFT_PROPERTIES_LIST_EXTRA));
            }
            if (extras_.containsKey(IS_CATEGORY_EXTRA)) {
                isCategory = extras_.getBoolean(IS_CATEGORY_EXTRA);
            }
        }
    }

    @Override
    public void setIntent(Intent newIntent) {
        super.setIntent(newIntent);
        injectExtras_();
    }

    public static class IntentBuilder_ {

        private Context context_;
        private final Intent intent_;
        private android.app.Fragment fragment_;
        private android.support.v4.app.Fragment fragmentSupport_;

        public IntentBuilder_(Context context) {
            context_ = context;
            intent_ = new Intent(context, RefineActivity_.class);
        }

        public IntentBuilder_(android.app.Fragment fragment) {
            fragment_ = fragment;
            context_ = fragment.getActivity();
            intent_ = new Intent(context_, RefineActivity_.class);
        }

        public IntentBuilder_(android.support.v4.app.Fragment fragment) {
            fragmentSupport_ = fragment;
            context_ = fragment.getActivity();
            intent_ = new Intent(context_, RefineActivity_.class);
        }

        public Intent get() {
            return intent_;
        }

        public RefineActivity_.IntentBuilder_ flags(int flags) {
            intent_.setFlags(flags);
            return this;
        }

        public void start() {
            context_.startActivity(intent_);
        }

        public void startForResult(int requestCode) {
            if (fragmentSupport_!= null) {
                fragmentSupport_.startActivityForResult(intent_, requestCode);
            } else {
                if (fragment_!= null) {
                    fragment_.startActivityForResult(intent_, requestCode);
                } else {
                    if (context_ instanceof Activity) {
                        ((Activity) context_).startActivityForResult(intent_, requestCode);
                    } else {
                        context_.startActivity(intent_);
                    }
                }
            }
        }

        public RefineActivity_.IntentBuilder_ isCompany(boolean isCompany) {
            intent_.putExtra(IS_COMPANY_EXTRA, isCompany);
            return this;
        }

        public RefineActivity_.IntentBuilder_ siftCatogoriesList(ArrayList<SiftCategory> siftCatogoriesList) {
            intent_.putExtra(SIFT_CATOGORIES_LIST_EXTRA, ((Serializable) siftCatogoriesList));
            return this;
        }

        public RefineActivity_.IntentBuilder_ siftMap(HashMap<String, String> siftMap) {
            intent_.putExtra(SIFT_MAP_EXTRA, ((Serializable) siftMap));
            return this;
        }

        public RefineActivity_.IntentBuilder_ siftLocationsList(ArrayList<SearchLocation> siftLocationsList) {
            intent_.putExtra(SIFT_LOCATIONS_LIST_EXTRA, ((Serializable) siftLocationsList));
            return this;
        }

        public RefineActivity_.IntentBuilder_ siftPropertiesList(ArrayList<SearchProperty> siftPropertiesList) {
            intent_.putExtra(SIFT_PROPERTIES_LIST_EXTRA, ((Serializable) siftPropertiesList));
            return this;
        }

        public RefineActivity_.IntentBuilder_ isCategory(boolean isCategory) {
            intent_.putExtra(IS_CATEGORY_EXTRA, isCategory);
            return this;
        }

    }

}
